Alunos:
Bruno d' Almeida Franco 1413385
Luis Claudio Cantanhede Martins 1512946



Para a compila��o do interpretador e dos escalonadores, ser�o utilizados os seguintes comandos:
gcc -o compila_arquivos compila_arquivos.c
    Esse comando acima vai compilar todos esses codigos:
        dorminhoco
        durabastante
        infinito
        interpretador
        controle_escalonadores

O dorminhoco é um IO-bound, para rodar ele necesita de um arquivo "dorminhocoentrada.txt".


O durabastante rada mais ou menos 50 segundos e escreve uma mensagem a cada um segundo.

O programa "infinito" nunca acaba e escreve uma mensagem a cada um segundo.


No arquivo exect.txt bota-se os comandos para o interpretador.c ler e passar para o controle_escalonadores.c

Para rodar o interpretador e o escalonador deve:
    
    Abrir dois terminais:
    O primeiro para o interpretador e deve execula-lo com o ./interpretador
    O segundo é para o controle_escalonadores e deve executa-lo com o ./controle_escalonadores
    (Obs: Executar nessa ordem)

    Os dois terminais vão exibir o status na tela, porém é o controle_escalonadores que mostra com detalhes o escalonamento

    Além da saída da tela do terminal, também há arquivos de saida com o status de cada polica de escalonamento e do interpretador.
        -saidaEscalonadorRT.txt
        -saidaEscalonadorPR.txt
        -saidaEscalonadorRR.txt
        -saidaInterpretador.txt

--------Terminar-------    
Adicionalmente, todos os escalonadores abrem um arquivo de entrada para os programas a serem executados, para caso necessitem do mesmo. A entrada dos programas � redirecionada para o arquivo e a sa�da para o arquivo "saida.txt".
Apesar de haver o escalonamento, a ordem de escrita no arquivo "saida.txt" n�o reflete o mesmo, pois os programas s� gravam no arquivo as informa��es que tiveram de sa�da ap�s terminarem. Sendo assim, no arquivo "saida.txt", a ordem de escrita � com base em qual programa terminou primeiro.

Para o escalonador de Round Robin, foi utilizada uma fatia de tempo de 1 segundo. Sendo assim, os programas alternam entre si exatamente na ordem que est�o no arquivo "exec.txt".
Para o escalonador de Prioridade, a ordem de execu��o � dada ap�s organizar a lista de programas por prioridade. Assim, o programa com maior prioridade(sendo 1 a maior e 7 a menor) ir� rodar primeiro. Apenas quando este terminar ser� continuado o seguinte.
Para o escalonador de Real Time, preenche-se um vetor de 60 posi��es com pids, representando assim o in�cio do programa e a dura��o do mesmo. Caso haja ou conflito de intervalo com um programa j� existente, o novo ser� descartado, assim como se a soma do inicio com a dura��o for maior que 60.

Para os exemplos de exec.txt dados, nos arquivos enviados em anexo temos uma sa�da para cada inst�ncia do interpretador, uma sa�da de cada escalonador e a sa�da final de cada um dos escalonadores.
Por termos programas infinitos, nem todos os escalonadores terminar�o seu processamento, tendo de ser cancelados pelo comando Ctrl+C.

No exemplo do escalonador de Prioridade, foram utilizados os programas "dorminhoco" e "durabastante". Na ordem do arquivo, temos:
dorminhoco - prioridade 5
durabastante - prioridade 6
dorminhoco - prioridade 1
dorminhoco - prioridade 2
dorminhoco - prioridade 7
durabastante - prioridade 4
dorminhoco - prioridade 2

Ap�s a ordena��o, temos, em ordem de execu��o:
dorminhoco - dorminhoco - dorminhoco - durabastante - dorminhoco - durabastante - dorminhoco
Por ser ordem de prioridade, n�o temos problema de ordem errada no saida.txt e podemos verificar que a execu��o est� correta tamb�m seguindo o log do escalonador comparando os pids informados no come�o com a ordem de pid executada.

No exemplo do escalonador de Round Robin, foram utilizados os programas "dorminhoco", "durabastante", "infinito" e "teste_mmq". Pela ordem do arquivo:
dorminhoco - infinito - durabastante - dorminhoco - teste_mmq
Os programas foram executados corretamente nesta ordem e, ao terminarem, eram retirados da lista. O �nico "problema" � com rela��o aos programas infinitos, pois como citado antes, ao causar uma interrup��o, as informa��es que eles deveriam gravar n�o ficam no arquivo de saida.
Ao terminar o "durabastante", foi lan�ada uma interrup��o, pois o escalonador ficaria infinitamente alternando entre "infinito" e "teste_mmq".

No exemplo do escalonador de Real Time, foram utilizados os programas "dorminhoco", "durabastante", "infinito" e "teste_mmq". No arquivo temos:
dorminhoco I=0 D=10
infinito I=10 D=10
teste_mmq I=50 D=5
durabastante I=4 D=13
durabastante I=57 D=10
durabastante I=20 D=10
dorminhoco I=40 D=15
dorminhoco I=40 D=10
Observando os intervalos, vemos que:
durabastante I=4 D=13 n�o ser� executado, pois entra em conflito com dorminhoco(1)
durabastante I=57 D=10 n�o ser� executado, pois o intervalo � inv�lido
dorminhoco I=40 D=15 n�o ser� executado, pois entra em conflito com teste_mmq

Sendo assim, os processos resultantes e intervalos est�o corretamente representados pelo Real Time. Caso o hor�rio inicial de execu��o(tempo no rel�gio) seja um intervalo no meio da execu��o de um programa, este mesmo n�o ser� executado, pois a informa��o que temos � que o programa deve iniciar em I=X e executar durante D=Y segundos, portanto em um intervalo no meio disso ele n�o deveria ser iniciado.
Novamente, como utilizamos programas de execu��o infinita, foi lan�ada uma interrup��o ao terminar o minuto do �ltimo programa ainda finito.